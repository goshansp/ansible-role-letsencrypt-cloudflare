---
- name: Filter and return only selected facts
  ansible.builtin.setup:

- name: Install OpenSSL
  package:
    name: openssl
    state: latest
  when: ansible_facts.pkg_mgr != "atomic_container"

- name: Check if the certificate directory exists
  ansible.builtin.stat:
    path: "{{ certificate_directory }}"
  register: certificate_directory_stat

- name: "Create the directory"
  ansible.builtin.file:
    path: "{{ certificate_directory }}"
    state: directory
    owner: "{{ certificate_files_owner }}"
    group: "{{ certificate_files_group }}"
    mode: '700'

- name: Generate the private key
  ansible.builtin.command: "openssl genrsa -out \"{{ certificate_directory + '/' + key_filename }}\" {{ key_size }}"
  args:
    creates: "{{ certificate_directory + '/' + key_filename }}"

- name: Set the private key file permissions
  ansible.builtin.file:
    path: "{{ certificate_directory + '/' + key_filename }}"
    owner: "{{ certificate_files_owner }}"
    group: "{{ certificate_files_group }}"
    mode: "600"

- name: Check if the CSR exists
  ansible.builtin.stat:
    path: "{{ certificate_directory + '/' + csr_filename }}"
  register: csr_stat

- name: Create the OpenSSL configuration file for the CSR
  ansible.builtin.template:
    src: openssl-request.conf.j2
    dest: "{{ certificate_directory }}/openssl-request.conf"
    owner: "{{ certificate_files_owner }}"
    mode: "600"
  when: not csr_stat.stat.exists

- name: Generate the CSR
  ansible.builtin.command: |
    openssl req -new -sha256 -subj "/CN={{ certificate_common_name }}"
    -config "{{ certificate_directory }}/openssl-request.conf"
    -key "{{ certificate_directory + '/' + key_filename }}"
    -out "{{ certificate_directory + '/' + csr_filename }}"
  args:
    creates: "{{ certificate_directory + '/' + csr_filename }}"

- name: Set the CSR file permissions
  ansible.builtin.file:
    path: "{{ certificate_directory + '/' + csr_filename }}"
    owner: "{{ certificate_files_owner }}"
    group: "{{ certificate_files_group }}"
    mode: "600"

- name: Delete the OpenSSL configuration file for the CSR
  ansible.builtin.file:
    path: "{{ certificate_directory }}/openssl-request.conf"
    state: absent

- name: "Create the key directory"
  ansible.builtin.file:
    path: "{{ letsencrypt_key_directory }}"
    owner: "{{ certificate_files_owner }}"
    group: "{{ certificate_files_group }}"
    mode: '700'
    state: directory

- name: Generate the Let's Encrypt account key
  ansible.builtin.command: "openssl genrsa -out \"{{ letsencrypt_key_directory + '/' + letsencrypt_key_filename }}\" {{ letsencrypt_key_size }}"
  args:
    creates: "{{ letsencrypt_key_directory + '/' + letsencrypt_key_filename }}"

- name: Set the Let's Encrypt account key file permissions
  ansible.builtin.file:
    path: "{{ letsencrypt_key_directory + '/' + letsencrypt_key_filename }}"
    owner: "{{ certificate_files_owner }}"
    group: "{{ certificate_files_group }}"
    mode: "600"

- name: Initiate the Let's Encrypt challenge
  community.crypto.acme_certificate:
    acme_directory: "{{ letsencrypt_acme_directory }}"
    acme_version: "{{ letsencrypt_acme_version }}"
    challenge: dns-01
    account_key: "{{ letsencrypt_key_directory + '/' + letsencrypt_key_filename }}"
    csr: "{{ certificate_directory + '/' + csr_filename }}"
    dest: "{{ certificate_directory + '/' + crt_filename }}"
    account_email: "{{ letsencrypt_email }}"
    remaining_days: "{{ certificate_remaining_days }}"
    terms_agreed: true
  register: letsencrypt_challenge

- name: Delete DNS Record
  community.general.cloudflare_dns:
    domain: "{{ cloudflare_domain }}"
    record: "_acme-challenge.{{ item.key }}"
    type: TXT
    value: "\"{{ item.value['dns-01']['resource_value'] }}\""
    state: absent
    account_email: "{{ cloudflare_email }}"
    account_api_token: "{{ cloudflare_api_key }}"
  with_dict: "{{ letsencrypt_challenge['challenge_data'] | default({}) }}"
  when: letsencrypt_challenge['challenge_data'] is defined

- name: Create DNS Record
  community.general.cloudflare_dns:
    domain: "{{ cloudflare_domain }}"
    record: "_acme-challenge.{{ item.key }}"
    type: TXT
    value: "\"{{ item.value['dns-01']['resource_value'] }}\""
    state: present
    solo: true
    account_email: "{{ cloudflare_email }}"
    # account_api_token: "{{ lookup('env', 'CLOUDFLARE_API_KEY') }}"
    account_api_token: "{{ cloudflare_api_key }}"
  with_dict: "{{ letsencrypt_challenge['challenge_data'] | default({}) }}"
  when: letsencrypt_challenge['challenge_data'] is defined

- name: Validate the Let's Encrypt challenge
  community.crypto.acme_certificate:
    acme_directory: "{{ letsencrypt_acme_directory }}"
    acme_version: "{{ letsencrypt_acme_version }}"
    challenge: dns-01
    account_key: "{{ letsencrypt_key_directory + '/' + letsencrypt_key_filename }}"
    csr: "{{ certificate_directory + '/' + csr_filename }}"
    dest: "{{ certificate_directory + '/' + crt_filename }}"
    account_email: "{{ letsencrypt_email }}"
    data: "{{ letsencrypt_challenge }}"
    terms_agreed: true
  register: letsencrypt_validation
  retries: 6
  delay: 10
  until: letsencrypt_validation is success
  when: letsencrypt_challenge['challenge_data'] is defined

- name: Set the crt file permissions
  ansible.builtin.file:
    path: "{{ certificate_directory + '/' + crt_filename }}"
    owner: "{{ certificate_files_owner }}"
    group: "{{ certificate_files_group }}"
    mode: "600"

- name: Delete DNS Record
  community.general.cloudflare_dns:
    domain: "{{ cloudflare_domain }}"
    record: "_acme-challenge.{{ item.key }}"
    type: TXT
    value: "\"{{ item.value['dns-01']['resource_value'] }}\""
    state: absent
    account_email: "{{ cloudflare_email }}"
    account_api_token: "{{ cloudflare_api_key }}"
  with_dict: "{{ letsencrypt_challenge['challenge_data'] | default({}) }}"
  when: letsencrypt_challenge['challenge_data'] is defined

- name: download the Let's Encrypt intermediate CA
  get_url:
    url: https://letsencrypt.org/certs/lets-encrypt-r3-cross-signed.pem
    dest: "{{ certificate_directory + '/' + intermediate_filename }}"
    owner: "{{ certificate_files_owner }}"
    group: "{{ certificate_files_group }}"
    mode: "600"
  when: include_intermediate

- name: get content of the certificate
  command: "cat {{ certificate_directory }}/{{ crt_filename }}"
  register: certificate_content
  changed_when: false
  when: include_intermediate

- name: get content of the intermediate CA
  command: "cat {{ certificate_directory }}/{{ intermediate_filename }}"
  register: intermediate_content
  changed_when: false
  when: include_intermediate

- name: create a file with the certificate and intermediate CA concatenated
  copy:
    content: "{{ certificate_content['stdout'] + '\n' + intermediate_content['stdout'] + '\n' }}"
    dest: "{{ certificate_directory + '/' + fullchain_filename }}"
    owner: "{{ certificate_files_owner }}"
    group: "{{ certificate_files_group }}"
    mode: "600"
  when: include_intermediate

- name: Ensure destination folders exist for certificate copy
  ansible.builtin.file:
    path: "{{ item.full_path | dirname }}"
    state: directory
    mode: '700'
  with_items:
    - { full_path: "{{ copy_csr_full_path }}"}
    - { full_path: "{{ copy_crt_full_path }}"}
    - { full_path: "{{ copy_key_full_path }}"}
  when: item.full_path != ""

- name: Copy/Rename nominated files
  ansible.builtin.copy:
    src: "{{ certificate_directory + '/' + item.source_filename }}"
    dest: "{{ item.full_path }}"
    remote_src: true
    mode: '600'
  with_items:
    - { full_path: "{{ copy_csr_full_path }}", source_filename: "{{ csr_filename }}"}
    - { full_path: "{{ copy_crt_full_path }}", source_filename: "{{ crt_filename }}"}
    - { full_path: "{{ copy_key_full_path }}", source_filename: "{{ key_filename }}"}
    - { full_path: "{{ copy_intermediate_full_path }}", source_filename: "{{ intermediate_filename }}"}
    - { full_path: "{{ copy_fullchain_full_path }}", source_filename: "{{ fullchain_filename }}"}
  when: item.full_path != ""

- name: Remove generated files if 'cleanup_all'
  ansible.builtin.file:
    path: "{{ item.full_path }}"
    state: absent
  with_items:
    - { full_path: "{{ certificate_directory + '/' + csr_filename }}"}
    - { full_path: "{{ certificate_directory + '/' + crt_filename }}"}
    - { full_path: "{{ certificate_directory + '/' + key_filename }}"}
    - { full_path: "{{ certificate_directory + '/' + intermediate_filename }}"}
    - { full_path: "{{ certificate_directory + '/' + fullchain_filename }}"}
  when: cleanup_all

- name: Remove certificate directory if 'cleanup_all' and didnt previously exist
  ansible.builtin.file:
    path: "{{ certificate_directory }}"
    state: absent
  when: (cleanup_all) and (not certificate_directory_stat.stat.exists)

